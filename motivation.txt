* SQL is arguably the best way for specification what data to retrieve ("with respect to the elephants" - using the standard, long-term proven query language)
* switching from one DBMS to another in an existing project is unrealistic even if a database abstraction layer is used
* using an abstraction layer leads to using an abstract syntax of queries - which is then more difficult to move the query to the database level, e.g., for testing or just as a result of a refactoring (e.g., Dibi allows specifying identifiers in brackets, which causes troubles when one wants an array literal, or it allows to specify string literals in double quotes, which is not legal in plain PostgreSQL, though)
* it is natural to use the full feature set of the DBMS being used, not just CRUD or standardized SQL
* relations shall be the first-class citizens of a good database layer
** data retrieved from a relational database are always relations, no matter if they were selected from a table or view, a join, a set-returning function or write queries using the RETURNING clause
** retrieving data shall be independent of from where the data comes - it always is just a relation
** a relation may be defined in terms of other relations - e.g., JOIN rel, EXISTS(rel), field IN (rel), etc.
* PostgreSQL is a mature database management system with plenty of features, both standard and extensions, and the database layer shall support them
** inheritance
** array types
** EXPLAIN and processing of its results
** VACUUM - database maintenance
** IPC using LISTEN and NOTIFY
** asynchronous execution
** common table expressions
** OIDs
** large objects
** type system features (user-defined types, special types such as HSTORE or JSON, range types, ...)
* strive for specification compliance so that any non-standard cases are handled correctly ("...a database layer made the correct way")
** use array item delimiters really according to the subtype, not hard-wired comma
** support multiple types of same names in different schemas, not simplified to just type name
* restricting to just a single DBMS surprisingly simplifies a lot of things, especially no abstraction is made upon the connection and no drivers abstraction has to be made (since the only reasonable PHP driver for PostgreSQL is the pgsql extension)
